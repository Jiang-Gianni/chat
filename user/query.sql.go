// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package user

import (
	"context"
)

const countUser = `-- name: CountUser :one
select count(*) from user where username = ?1
`

func (q *Queries) CountUser(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUser, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
select id, username, password, last_room_id from user where username = ?1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.LastRoomID,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
insert into user(username, password, last_room_id) values (?1, ?2, -1)
`

type InsertUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.Username, arg.Password)
	return err
}
